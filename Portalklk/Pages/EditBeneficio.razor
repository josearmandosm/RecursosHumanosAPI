@page "/editbeneficio/{id:int}"
@page "/editbeneficio"

@using RecursosHumanos.Shared;
@using Portalklk.Services;
@inject IBeneficioService beneficioService;
@inject NavigationManager Navigation;

<h3>Editar Beneficio</h3>

<EditForm Model="@beneficio" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="nombre">Nombre:</label>
        <InputText id="nombre" class="form-control" @bind-Value="beneficio.Nombre" />
    </div>

    <div class="form-group">
        <label for="descripcion">Descripción:</label>
        <InputText id="descripcion" class="form-control" @bind-Value="beneficio.Descripcion" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private BeneficioUpdateDTO beneficio = new BeneficioUpdateDTO
        {
            Nombre = string.Empty, // Asegúrate de inicializar el nombre
            Descripcion = string.Empty // Asegúrate de inicializar la descripción
        };

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            var existingBeneficio = await beneficioService.Get(Id);
            if (existingBeneficio != null)
            {
                beneficio.Nombre = existingBeneficio.Nombre;
                beneficio.Descripcion = existingBeneficio.Descripcion;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        await beneficioService.Update(Id, beneficio);
        Navigation.NavigateTo("/Beneficios");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/Beneficios");
    }
}
